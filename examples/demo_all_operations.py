#!/usr/bin/env python3
"""
Comprehensive demo of pngmeta operations with colored output.

This script demonstrates:
- Reading existing metadata
- Adding/modifying metadata
- Working with XMP
- Dictionary-style access
- Saving changes
- Verifying the results

Run: python examples/demo_all_operations.py
"""

import sys
from pathlib import Path

# Add parent directory to path for development
sys.path.insert(0, str(Path(__file__).parent.parent))

from pngmeta import PngMeta


# ANSI color codes for terminal output
class Colors:
    HEADER = "\033[95m"
    BLUE = "\033[94m"
    CYAN = "\033[96m"
    GREEN = "\033[92m"
    YELLOW = "\033[93m"
    RED = "\033[91m"
    BOLD = "\033[1m"
    UNDERLINE = "\033[4m"
    END = "\033[0m"


def print_header(text):
    """Print a colored header."""
    print(f"\n{Colors.HEADER}{Colors.BOLD}{'='*70}{Colors.END}")
    print(f"{Colors.HEADER}{Colors.BOLD}{text:^70}{Colors.END}")
    print(f"{Colors.HEADER}{Colors.BOLD}{'='*70}{Colors.END}\n")


def print_step(number, text):
    """Print a step number and description."""
    print(f"{Colors.CYAN}{Colors.BOLD}Step {number}:{Colors.END} {Colors.CYAN}{text}{Colors.END}")


def print_success(text):
    """Print success message."""
    print(f"{Colors.GREEN}âœ“ {text}{Colors.END}")


def print_info(text):
    """Print info message."""
    print(f"{Colors.BLUE}â„¹ {text}{Colors.END}")


def print_warning(text):
    """Print warning message."""
    print(f"{Colors.YELLOW}âš  {text}{Colors.END}")


def print_error(text):
    """Print error message."""
    print(f"{Colors.RED}âœ— {text}{Colors.END}")


def print_metadata(meta, title="Metadata Contents"):
    """Print all metadata in a formatted table."""
    print(f"\n{Colors.BOLD}{title}{Colors.END}")
    print(f"{Colors.BOLD}{'-' * 70}{Colors.END}")

    if len(list(meta.keys())) == 0:
        print(f"{Colors.YELLOW}  (No metadata found){Colors.END}")
    else:
        for key, value in meta.items():
            # Truncate long values
            display_value = value if len(value) < 60 else value[:57] + "..."
            print(f"  {Colors.BOLD}{key:20s}{Colors.END} : {display_value}")

    print(f"{Colors.BOLD}{'-' * 70}{Colors.END}\n")


def main():
    """Run the complete demonstration."""

    print_header("pngmeta - Complete Operations Demo")

    # Setup
    script_dir = Path(__file__).parent
    test_image = script_dir / "test-image.png"
    output_image = script_dir / "test-image-with-metadata.png"

    print_info(f"Working with: {test_image}")

    if not test_image.exists():
        print_error(f"Test image not found: {test_image}")
        print_info("Please ensure test-image.png exists in the examples/ folder")
        sys.exit(1)

    # Step 1: Read existing metadata
    print_step(1, "Reading existing metadata from test image")
    try:
        meta = PngMeta(test_image)
        print_success(f"Successfully opened: {test_image.name}")
        print_metadata(meta, "Original Metadata")
    except Exception as e:
        print_error(f"Failed to open image: {e}")
        sys.exit(1)

    # Step 2: Check for specific fields
    print_step(2, "Checking for specific metadata fields")

    fields_to_check = ["Title", "Author", "Copyright", "Description"]
    for field in fields_to_check:
        if field in meta:
            print_success(f"'{field}' exists: {meta[field]}")
        else:
            print_warning(f"'{field}' not found")

    # Step 3: Add/modify metadata
    print_step(3, "Adding comprehensive metadata")

    metadata_to_add = {
        "Title": "pngmeta Demo Image",
        "Author": "pngmeta Library",
        "Copyright": "Â© 2025 pngmeta Contributors. Released to public domain.",
        "Description": "This image demonstrates PNG metadata handling with pngmeta library",
        "Creation Time": "2025-10-05T12:00:00",
        "Software": "pngmeta 0.1.0",
        "Comment": "Generated by demo_all_operations.py example script",
        "Source": "https://github.com/yourusername/pngmeta",
        "Warning": "Sample metadata - modify as needed",
    }

    for key, value in metadata_to_add.items():
        meta[key] = value
        print_success(
            f"Set '{key}' = '{value[:50]}...' " if len(value) > 50 else f"Set '{key}' = '{value}'"
        )

    # Step 4: Demonstrate dictionary operations
    print_step(4, "Demonstrating dictionary-style operations")

    # Get
    title = meta.get("Title", "No title")
    print_info(f"meta.get('Title') = '{title}'")

    # Direct access
    author = meta["Author"]
    print_info(f"meta['Author'] = '{author}'")

    # Check existence
    has_license = "License" in meta
    print_info(f"'License' in meta = {has_license}")

    # Count
    count = len(list(meta.keys()))
    print_info(f"Total metadata fields: {count}")

    # Step 5: Work with XMP
    print_step(5, "Adding XMP metadata")

    xmp_data = """<?xml version="1.0" encoding="UTF-8"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/">
  <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
    <rdf:Description rdf:about=""
        xmlns:dc="http://purl.org/dc/elements/1.1/"
        xmlns:xmp="http://ns.adobe.com/xap/1.0/">
      <dc:title>
        <rdf:Alt>
          <rdf:li xml:lang="x-default">pngmeta Demo Image</rdf:li>
        </rdf:Alt>
      </dc:title>
      <dc:creator>
        <rdf:Seq>
          <rdf:li>pngmeta Library</rdf:li>
        </rdf:Seq>
      </dc:creator>
      <dc:description>
        <rdf:Alt>
          <rdf:li xml:lang="x-default">Demonstration of PNG metadata</rdf:li>
        </rdf:Alt>
      </dc:description>
      <xmp:Rating>5</xmp:Rating>
      <xmp:CreatorTool>pngmeta 0.1.0</xmp:CreatorTool>
    </rdf:Description>
  </rdf:RDF>
</x:xmpmeta>"""

    meta.set_xmp(xmp_data)
    print_success(f"Added XMP metadata ({len(xmp_data)} bytes)")

    # Verify XMP was added
    retrieved_xmp = meta.get_xmp()
    if retrieved_xmp:
        print_success(f"XMP retrieved successfully ({len(retrieved_xmp)} bytes)")
    else:
        print_warning("XMP not found")

    # Step 6: Display all metadata
    print_step(6, "Displaying all metadata (including XMP)")
    print_metadata(meta, "Complete Metadata (Before Save)")

    # Step 7: Save to new file
    print_step(7, f"Saving metadata to new file: {output_image.name}")

    try:
        meta.save(output_image)
        print_success(f"Saved to: {output_image}")

        # Check file size
        original_size = test_image.stat().st_size
        new_size = output_image.stat().st_size
        size_diff = new_size - original_size

        print_info(f"Original file size: {original_size:,} bytes")
        print_info(f"New file size: {new_size:,} bytes")
        print_info(f"Size difference: {size_diff:+,} bytes (metadata overhead)")
    except Exception as e:
        print_error(f"Failed to save: {e}")
        sys.exit(1)

    # Step 8: Verify by reading back
    print_step(8, "Verifying metadata by reading back the saved file")

    try:
        meta_verify = PngMeta(output_image)
        print_success(f"Successfully re-opened: {output_image.name}")

        # Check all fields
        all_match = True
        for key in metadata_to_add.keys():
            if key in meta_verify:
                if meta_verify[key] == metadata_to_add[key]:
                    print_success(f"âœ“ '{key}' verified")
                else:
                    print_error(f"âœ— '{key}' mismatch!")
                    all_match = False
            else:
                print_error(f"âœ— '{key}' missing!")
                all_match = False

        # Check XMP
        if meta_verify.get_xmp():
            print_success("âœ“ XMP metadata verified")
        else:
            print_warning("âš  XMP metadata missing")

        if all_match:
            print_success("\nðŸŽ‰ All metadata verified successfully!")

        print_metadata(meta_verify, "Final Metadata (After Save)")

    except Exception as e:
        print_error(f"Failed to verify: {e}")
        sys.exit(1)

    # Step 9: Demonstrate iteration
    print_step(9, "Iterating over all metadata entries")

    print(f"\n{Colors.BOLD}Iteration using .items():{Colors.END}")
    for i, (key, value) in enumerate(meta_verify.items(), 1):
        short_value = value[:40] + "..." if len(value) > 40 else value
        print(f"  {i}. {Colors.BOLD}{key}{Colors.END}: {short_value}")

    # Summary
    print_header("Demo Complete!")

    print(f"{Colors.GREEN}{Colors.BOLD}Summary:{Colors.END}")
    print(f"  â€¢ Read existing metadata: {Colors.GREEN}âœ“{Colors.END}")
    print(f"  â€¢ Added {len(metadata_to_add)} metadata fields: {Colors.GREEN}âœ“{Colors.END}")
    print(f"  â€¢ Added XMP metadata: {Colors.GREEN}âœ“{Colors.END}")
    print(f"  â€¢ Saved to new file: {Colors.GREEN}âœ“{Colors.END}")
    print(f"  â€¢ Verified all data: {Colors.GREEN}âœ“{Colors.END}")
    print(f"\n{Colors.CYAN}Output file:{Colors.END} {output_image}")
    print(f"{Colors.CYAN}Original file:{Colors.END} {test_image} (unchanged)\n")

    print(f"{Colors.BOLD}Next steps:{Colors.END}")
    print(f"  â€¢ View the output: {Colors.CYAN}open {output_image}{Colors.END}")
    print(
        f"  â€¢ Inspect with ImageMagick: {Colors.CYAN}identify -verbose {output_image}{Colors.END}"
    )
    print("  â€¢ Try modifying the metadata yourself!")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print(f"\n\n{Colors.YELLOW}Demo interrupted by user.{Colors.END}")
        sys.exit(0)
    except Exception as e:
        print(f"\n{Colors.RED}Unexpected error: {e}{Colors.END}")
        import traceback

        traceback.print_exc()
        sys.exit(1)
